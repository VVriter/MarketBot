#!/bin/env python3

from dotenv import load_dotenv
load_dotenv()

import os, sys, signal
import asyncio
from pymongo import MongoClient
from aiogram import Bot, Dispatcher, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.filters.command import Command
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback
import logging
from datetime import datetime, timezone

TOKEN = os.getenv('TOKEN')
dp = Dispatcher()

mongoClient = MongoClient(os.getenv("MONGO_URI"))
db = mongoClient["market_bot"]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –¥–∞—Ç–∞)
user_data = {}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def validate_user(message):
    user = db["users"].find_one({"id": message.from_user.id})
    if not user:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞ üòì")
        return False
    else:
        return True

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    if not await validate_user(message):
        return
    await message.reply("<b>–ú–∞–Ω—É–∞–ª –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:</b>\n\n/start - –º–∞–Ω—É–∞–ª\n/add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ—Å—Ç–∞–≤–∫—É\n/all - —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")

# –ö–æ–º–∞–Ω–¥–∞ /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
@dp.message(Command('add'))
async def add_command(message: Message) -> None:
    if not await validate_user(message):
        return
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:")
    user_data[message.from_user.id] = {"step": "name"}

# –ö–æ–º–∞–Ω–¥–∞ /all –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
@dp.message(Command('all'))
async def add_command(message: Message) -> None:
    if not await validate_user(message):
        return
    products = db['products'].find()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    message_to_reply = ""
    for product in products:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º async for, —Ç–∞–∫ –∫–∞–∫ find() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—É—Ä—Å–æ—Ä
        product_name = product.get('product_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç')  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
        expiry_date = product.get('expiry_date', '–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞').get("human", '–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')  # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
        message_to_reply += f"{product_name} -> {expiry_date}\n"  # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

    if message_to_reply:
        await message.reply(message_to_reply)
    else:
        await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞)
@dp.message()
async def any_message(message: Message) -> None:
    if message.from_user.id in user_data and user_data[message.from_user.id]["step"] == "name":
        product_name = message.text
        user_data[message.from_user.id]["name"] = product_name
        user_data[message.from_user.id]["step"] = "date"
        await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏:", reply_markup=await SimpleCalendar().start_calendar())
    else:
        await validate_user(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
@dp.callback_query(SimpleCalendarCallback.filter())
async def process_simple_calendar(callback_query: CallbackQuery, callback_data: SimpleCalendarCallback):
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
    if selected:
        user_id = callback_query.from_user.id
        if user_id in user_data and user_data[user_id]["step"] == "date":
            product_name = user_data[user_id]["name"]
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db["products"].insert_one({
                "user_id": user_id,
                "product_name": product_name,
                "expiry_date": {
                    "human": date.strftime('%Y-%m-%d'),
                    "iso": date.timestamp() * 1000
                }
            })
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            del user_data[user_id]
            await callback_query.message.answer(f"–ü—Ä–æ–¥—É–∫—Ç '{product_name}' –¥–æ–±–∞–≤–ª–µ–Ω —Å –¥–∞—Ç–æ–π –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ {date}")
        else:
            await callback_query.message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
async def check_expired_products(bot: Bot):
    while True:
        now = datetime.now().timestamp() * 1000
        # –ù–∞–π—Ç–∏ –≤—Å–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        expired_products = db['products'].find()

        for product in expired_products:
            user_id = product.get('user_id')
            product_name = product.get("product_name")
            expiry_date = product.get("expiry_date", {}).get("iso")
            expiry_date_human = product.get("expiry_date", {}).get("human")

            if expiry_date <= now:
                try:
                    await bot.send_message(user_id, f"‚ùó‚ùó‚ùó –ü—Ä–æ–¥—É–∫—Ç <b>'{product_name}'</b> —Å –¥–∞—Ç–æ–π –∏—Å—Ç–µ—á–µ–Ω–∏—è {expiry_date_human} —É–∂–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω! ‚ùó‚ùó‚ùó")
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    return
                # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                db['products'].delete_one({"_id": product["_id"]})

        await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main() -> None:
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    asyncio.create_task(check_expired_products(bot))
    await dp.start_polling(bot)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
def handler(signum, frame):
    print("Caught SIGTERM")
    sys.exit(1)

if __name__ == "__main__":
    signal.signal(signal.SIGTERM, handler)
    try:
        print("Starting MarketBot")
        logging.basicConfig(level=logging.INFO, stream=sys.stdout)
        asyncio.run(main())
    except SystemExit:
        print("Stopping MarketBot")
    except Exception as e:
        print(f"Crash! {e}")
        print("Trying to stop MarketBot")
